-- CTE cannot be outside of FROM/WHERE clause
WITH cte_basic AS (
	SELECT * FROM users_table
)
SELECT cte_basic, user_id FROM users_table;
ERROR:  column "cte_basic" does not exist
LINE 4: SELECT cte_basic, user_id FROM users_table;
               ^
WITH cte_1 AS (
	WITH cte_1_1 AS (
		SELECT * FROM users_table
	),
	cte_1_2 AS (
		SELECT cte_1_1
	)
	SELECT user_id FROM cte_1_2
)
SELECT * FROM users_table WHERE user_id IN (SELECT * FROM cte_1);
ERROR:  column "cte_1_1" does not exist
LINE 6:   SELECT cte_1_1
                 ^
-- CTE in FROM/WHERE is usable
WITH cte_1 AS (
	WITH cte_1_1 AS (
		SELECT * FROM users_table WHERE value_2 IN (1, 2, 3)
	)
	SELECT user_id, value_2 FROM users_table WHERE user_id IN (
		SELECT user_id FROM cte_1_1
	)
)
SELECT * FROM cte_1 WHERE value_2 NOT IN (SELECT value_2 FROM cte_1);
 user_id | value_2 
---------+---------
(0 rows)

WITH cte_1 AS (
	WITH cte_1_1 AS (
		SELECT * FROM users_table WHERE value_2 IN (1, 2, 3)
	)
	SELECT user_id, value_2 FROM users_table WHERE user_id IN (
		SELECT user_id FROM cte_1_1
	)
)
SELECT * FROM cte_1 WHERE value_2 IN (
		SELECT 
			value_2 
		FROM 
			cte_1 
		WHERE 
			user_id IN (2, 3, 4) 
		ORDER BY 
			1 
		LIMIT 
			10
	)
ORDER BY 
	1, 2 
LIMIT 
	10;
 user_id | value_2 
---------+---------
       1 |       0
       2 |       0
       2 |       1
       2 |       1
       2 |       1
       3 |       1
       3 |       1
       4 |       0
       4 |       0
       4 |       0
(10 rows)

-- CTE in SELECT level should not be allowed
SELECT user_id = (
	WITH users_done_event_3 AS (
		SELECT users_table.user_id FROM users_table, events_table WHERE users_table.user_id=events_table.user_id AND event_type=3
	)
	SELECT * FROM users_done_event_3 WHERE user_id < 4
)
FROM users_table 
ORDER BY 1
LIMIT 10;
ERROR:  could not run distributed query with subquery outside the FROM and WHERE clauses
HINT:  Consider using an equality filter on the distributed table's partition column.
-- the same CTEs in FROM and WHERE
SELECT * FROM 
(
	WITH cte AS (
		SELECT user_id, value_2 FROM users_table
	)
	SELECT * FROM cte WHERE value_2 IN (SELECT user_id FROM cte)
) ctes
ORDER BY 
	1, 2
LIMIT 10;
 user_id | value_2 
---------+---------
       1 |       2
       1 |       3
       1 |       3
       1 |       4
       1 |       4
       1 |       4
       2 |       1
       2 |       1
       2 |       1
       2 |       2
(10 rows)

-- two different CTEs in FROM and WHERE
SELECT * FROM 
(
	WITH cte_from AS (
		SELECT user_id, value_2 FROM users_table
	),
	cte_where AS (
		SELECT value_2 FROM events_table
	)
	SELECT * FROM cte_from WHERE value_2 IN (SELECT * FROM cte_where)
) binded_ctes
ORDER BY 
	1, 2
LIMIT 10;
 user_id | value_2 
---------+---------
       1 |       0
       1 |       2
       1 |       3
       1 |       3
       1 |       4
       1 |       4
       1 |       4
       2 |       0
       2 |       1
       2 |       1
(10 rows)

SELECT * FROM 
(
	WITH cte_from AS (
		SELECT user_id, value_2 FROM users_table
	),
	cte_where AS (
		SELECT value_2 FROM events_table-- WHERE user_id in (SELECT user_id FROM cte_from)
	)
	SELECT * FROM cte_from WHERE value_2 IN (SELECT * FROM cte_where)
) binded_ctes
WHERE binded_ctes.user_id IN (
	WITH another_cte AS (
		SELECT user_id FROM events_table WHERE value_2 IN (1, 2, 3)
	)
	SELECT * FROM another_cte
)
ORDER BY
	1, 2
LIMIT
	10;
 user_id | value_2 
---------+---------
       1 |       0
       1 |       2
       1 |       3
       1 |       3
       1 |       4
       1 |       4
       1 |       4
       2 |       0
       2 |       1
       2 |       1
--CTEs in FROM should work
WITH cte AS (
	SELECT user_id, value_2 from users_table WHERE user_id = 1 ORDER BY 2 LIMIT 5
)
SELECT * FROM cte;
 user_id | value_2 
---------+---------
       1 |       0
       1 |       2
       1 |       3
       1 |       3
       1 |       4
(5 rows)

-- create and use CTE in FROM should work
SELECT * FROM (WITH cte AS (
		SELECT user_id, value_2 from users_table WHERE user_id = 1 ORDER BY 2 LIMIT 5
	)
SELECT * FROM cte) a;
 user_id | value_2 
---------+---------
       1 |       0
       1 |       2
       1 |       3
       1 |       3
       1 |       4
(5 rows)

--CTEs in FROM in a subquery should work
SELECT * FROM (WITH cte AS (
		SELECT user_id, value_2 from users_table WHERE user_id = 1 ORDER BY 2 LIMIT 5
	)
SELECT * FROM cte) b;
 user_id | value_2 
---------+---------
       1 |       0
       1 |       2
       1 |       3
       1 |       3
       1 |       4
(5 rows)

--CTEs in FROM in a subquery should work even when we create it there
SELECT * FROM (
	SELECT * FROM (WITH cte AS (
		SELECT user_id, value_2 from users_table WHERE user_id = 1 ORDER BY 2 LIMIT 5
		)
		SELECT * FROM cte
	) a) b;
 user_id | value_2 
---------+---------
       1 |       0
       1 |       2
       1 |       3
       1 |       3
       1 |       4
(5 rows)

-- CTEs in FROM and as a subquery in FROM should work
WITH users_events AS (
	WITH users_done_2_3 AS (
		SELECT users_table.user_id, users_table.value_2 FROM users_table, events_table WHERE users_table.user_id = events_table.user_id AND event_type IN (2, 3)
	)
	SELECT users_done_2_3.user_id, users_done_2_3.value_2 as value_2_3 FROM users_done_2_3
)
SELECT * FROM (SELECT * FROM users_events WHERE value_2_3 IN (2, 5)) a ORDER BY 1, 2 LIMIT 10;
 user_id | value_2_3 
---------+-----------
       1 |         2
       1 |         2
       1 |         2
       1 |         2
       1 |         2
       2 |         2
       2 |         2
       2 |         2
       2 |         2
       2 |         2
(10 rows)

